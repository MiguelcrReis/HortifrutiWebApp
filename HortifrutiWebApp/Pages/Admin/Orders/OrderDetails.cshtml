@page
@model HortifrutiWebApp.Pages.Admin.Orders.OrderDetailsModel
@{
	ViewData["Title"] = "Área Administrativa :: Detalhes do Pedido";
	Layout = "_BackTemplate";
}

<header class="container p-3">
	<h1>Detalhes do Pedido <b id="orderId">@Model.Order.OrderId.ToString("D6")</b></h1>
	<h4>Situação: <b>@Model.Order.OrderStatus.ToString()</b></h4>
</header>

<div class="container">
	<hr />
	<h3>Cliente: <b>@Model.Order.Client?.Name</b></h3>
	<h4>Contato: <b>@Model.Order.Client?.Phone.Insert(7, "-").Insert(2, ") ").Insert(0, "(")</b></h4>
	<hr />
	<h4>Itens do Pedido</h4>
</div>

@if (Model.Order.OrderItems.Count > 0)
{
	<main class="container">
		<table class="table table-striped table-light table-sm table-hover">
			<thead>
				<tr class="bg-dark text-white">
					<th>@Html.DisplayNameFor(x => x.Order.OrderItems.First().ProductId)</th>
					<th>@Html.DisplayNameFor(x => x.Order.OrderItems.First().Product.Name)</th>
					<th>@Html.DisplayNameFor(x => x.Order.OrderItems.First().UnitaryValue)</th>
					<th>@Html.DisplayNameFor(x => x.Order.OrderItems.First().Quantity)</th>
					<th>@Html.DisplayNameFor(x => x.Order.OrderItems.First().ItemValue)</th>
					<th class="text-center">Ações</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Model.Order.OrderItems)
				{
					<tr id="@($"tr{item.ProductId}")">
						<td>@item.ProductId.ToString("D6")</td>
						<td>@item.Product.Name</td>
						<td>@item.UnitaryValue.ToString("C")</td>
						<td id="@($"qtd{item.ProductId}")">@item.Quantity.ToString()</td>
						<td id="@($"itemValue{item.ProductId}")">@item.ItemValue.ToString("C")</td>
						<td class="text-center">
							@if (Model.Order.OrderStatus == Models.Enums.OrderStatus.Realized)
							{
								<button class="btn btn-success btn-sm p-1 btn-add" name="@item.ProductId" data-value="1">
									<svg class="bi" width="20" height="20" fill="currentColor">
										<use xlink:href="/icons.svg#plus"></use>
									</svg>
								</button>
								<button class="btn btn-warning btn-sm p-1 btn-rem" name="@item.ProductId" data-value="-1">
									<svg class="bi" width="20" height="20" fill="currentColor">
										<use xlink:href="/icons.svg#dash"></use>
									</svg>
								</button>
								<button class="btn btn-danger btn-sm p-1 btn-del" name="@item.ProductId"
										onclick="return confirm('Deseja realmente excluir?');" type="button">
									<svg class="bi" width="20" height="20" fill="currentColor">
										<use xlink:href="/icons.svg#trash"></use>
									</svg>
								</button>
							}
							else
							{
								<span>N/A</span>
							}
						</td>
					</tr>
				}
			</tbody>
			<tfoot>
				<tr class="bg-dark text-light">
					<th colspan="4">Valor Total do Pedido</th>
					<th id="amount">@Model.Order.Amount.ToString("C")</th>
					<th class="text-center">
						@if (Model.Order.OrderStatus == Models.Enums.OrderStatus.Realized)
						{
							<form method="post" asp-page-handler="TakeOrder" asp-route-id="@Model.Order.OrderId">
								<button class="btn btn-sm btn-primary">Atender Pedido</button>
							</form>
						}
						else
						{
							@Model.Order.OrderStatus.ToString();
						}
					</th>
				</tr>
			</tfoot>
		</table>
	</main>
}
else
{ <h2>Não há itens neste pedido.</h2>}

@section Scripts {
	@{await Html.RenderPartialAsync("_CustomConfirm");}

	<script>
		function updateQuantity(el) {

			var prod = $(this).attr("name");
			var value = $(this).attr("data-value");
			var idQtd = "#qtd" + prod;
			var qtd = parseInt($(idQtd).text()) + parseInt(value);
			var order = $("#orderId").text();

			$.post("/api/OrderApi/UpdateOrderItem",
				{
					orderId:  order,
					productId: prod,
					quantity: qtd
				},
				function (data, status) {
					if (status == "success") {
						if (!data) return;
						$("#amount").text(data.v.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
						var idItemValue = '#itemValue' + data.item.id;
						var idQtd = "#qtd" + data.item.id;
						$(idItemValue).text(data.item.v.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
						$(idQtd).text(data.item.q);
					}
				}
			);
		}

		$(".btn-add").click(updateQuantity);

		$(".btn-rem").click(updateQuantity);

		$(".btn-del").click(function () {

			var prod = $(this).attr("name");
			var order = $("#orderId").text();
			$.post("/api/OrderApi/DeleteOrderItem",
				{
					orderId: order,
					productId: prod,
				},
				function (data, status) {
					if (status == "success") {
						if (!data) return;
						$("#amount").text(data.v.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));
						$("#tr" + data.id).remove();
					}
				}
			);
		});
	</script>
}
